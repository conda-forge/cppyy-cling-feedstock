From 89a5bb3207bc553b18119453d419ef7c4a8799fe Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Julian=20R=C3=BCth?= <julian.rueth@fsfe.org>
Date: Sun, 6 Oct 2019 14:34:14 +0200
Subject: [PATCH] honor --prefix

---
 setup.py | 30 +++++++-----------------------
 1 file changed, 7 insertions(+), 23 deletions(-)

diff --git a/setup.py b/setup.py
index 4afe79d..d652a8f 100755
--- a/setup.py
+++ b/setup.py
@@ -64,15 +64,6 @@ def get_srcdir():
         srcdir = os.path.join(topdir, 'src')
     return srcdir
 
-prefix = None
-def get_prefix():
-    """cppyy-cling installation."""
-    global prefix
-    if prefix is None:
-        prefix = os.path.join(get_builddir(), 'install', 'cppyy_backend')
-    return prefix
-
-
 #
 # customized commands
 #
@@ -84,7 +75,6 @@ class my_cmake_build(_build):
         # custom run
         log.info('Now building cppyy-cling')
         builddir = get_builddir()
-        prefix   = get_prefix()
         srcdir   = get_srcdir()
         if not os.path.exists(srcdir):
             log.info('No src directory ... creating with "python create_src_directory.py"')
@@ -155,7 +145,6 @@ class my_cmake_build(_build):
                         CMAKE_CLING_ARGS += ["-DFFTW_INCLUDE_DIR={}".format(FFTW_INC), "-DFFTW_LIBRARY={}".format(FFTW_LIB)]
             else:
                 CMAKE_CLING_ARGS += ['-Dbuiltin_freetype=OFF']
-            CMAKE_CLING_ARGS.append('-DCMAKE_INSTALL_PREFIX='+prefix)
         CMAKE_COMMAND = ['cmake', srcdir ] + CMAKE_CLING_ARGS
 
         log.info('Running cmake for cppyy-cling: %s', ' '.join(CMAKE_COMMAND))
@@ -231,13 +220,12 @@ class my_install(_install):
         env_make = os.getenv("MAKE")
         if not env_make:
             install_cmd = 'cmake'
-            install_args = ['--build', '.', '--config', get_build_type(), '--target', 'install']
+            install_args = ['--build', '.', '--config', get_build_type(), '--target', 'install', '-DCMAKE_INSTALL_PREFIX=' + self.prefix]
         else:
             install_args = env_make.split()
-            install_cmd, install_args = install_args[0], install_args[1:]+['install']
+            install_cmd, install_args = install_args[0], install_args[1:] + ['install'] + ['-DCMAKE_INSTALL_PREFIX' + self.prefix]
 
-        prefix = get_prefix()
-        log.info('Now creating installation under %s ...', prefix)
+        log.info('Now creating installation under %s ...', self.prefix)
         if env_make: os.unsetenv("MAKE")
         if subprocess.call([install_cmd] + install_args, cwd=builddir) != 0:
             raise DistutilsSetupError('Failed to install cppyy-cling')
@@ -245,11 +233,11 @@ class my_install(_install):
 
         # remove allDict.cxx.pch as it's not portable (rebuild on first run, see cppyy)
         log.info('removing allDict.cxx.pch')
-        os.remove(os.path.join(get_prefix(), 'etc', 'allDict.cxx.pch'))
+        os.remove(os.path.join(self.prefix, 'etc', 'allDict.cxx.pch'))
         # for manylinux, reset the default cxxversion to 17 if no user override
         if not 'STDCXX' in os.environ and is_manylinux():
             log.info('updating root-config to C++17 for manylinux')
-            inp = os.path.join(get_prefix(), 'bin', 'root-config')
+            inp = os.path.join(self.prefix, 'bin', 'root-config')
             outp = inp+'.new'
             outfile = open(outp, 'w')
             for line in open(inp).readlines():
@@ -263,7 +251,7 @@ class my_install(_install):
             os.chmod(inp, stat.S_IMODE(os.lstat(inp).st_mode) | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
 
             log.info('updating allCppflags.txt to C++17 for manylinux')
-            inp = os.path.join(get_prefix(), 'etc', 'dictpch', 'allCppflags.txt')
+            inp = os.path.join(self.prefix, 'etc', 'dictpch', 'allCppflags.txt')
             outp = inp+'.new'
             outfile = open(outp, 'w')
             for line in open(inp).readlines():
@@ -274,7 +262,7 @@ class my_install(_install):
             os.rename(outp, inp)
 
             log.info('updating compiledata.h to C++17 for manylinux')
-            inp = os.path.join(get_prefix(), 'include', 'compiledata.h')
+            inp = os.path.join(self.prefix, 'include', 'compiledata.h')
             outp = inp+'.new'
             outfile = open(outp, 'w')
             for line in open(inp).readlines():
@@ -283,10 +271,6 @@ class my_install(_install):
             outfile.close()
             os.rename(outp, inp)
 
-        install_path = self._get_install_path()
-        log.info('Copying installation to: %s ...', install_path)
-        self.copy_tree(os.path.join(get_prefix(), os.path.pardir), install_path)
-
         log.info('Install finished')
 
     def get_outputs(self):
-- 
2.23.0

