From c1e3090285c0f22d21b19955dea63ea4cfb32c49 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Julian=20R=C3=BCth?= <julian.rueth@fsfe.org>
Date: Sun, 6 Oct 2019 12:37:35 +0200
Subject: [PATCH] Allow cmake args to be passed in through the environment

---
 setup.py | 47 ++++++++++++++++++++++++++---------------------
 1 file changed, 26 insertions(+), 21 deletions(-)

diff --git a/setup.py b/setup.py
index ded848d..4afe79d 100755
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,4 @@
-import codecs, multiprocessing, os, sys, subprocess, stat
+import codecs, multiprocessing, os, sys, subprocess, stat, shlex
 from setuptools import setup, find_packages
 from distutils import log
 
@@ -133,25 +133,30 @@ class my_cmake_build(_build):
             if has_avx: extra_args += ' -mavx'
             os.putenv('EXTRA_CLING_ARGS', extra_args)
 
-        CMAKE_COMMAND = ['cmake', srcdir,
-                stdcxx, '-DLLVM_ENABLE_TERMINFO=0',
-                '-Dminimal=ON', '-Dasimage=OFF', '-Droot7=OFF', '-Dhttp=OFF',
-                '-Dbuiltin_pcre=ON', '-Dbuiltin_freetype=ON', '-Dbuiltin_zlib=ON', '-Dbuiltin_xxhash=ON']
-        if 'darwin' in sys.platform:
-            CMAKE_COMMAND.append('-Dlibcxx=ON')
-        CMAKE_COMMAND.append('-DCMAKE_BUILD_TYPE='+get_build_type())
-        if 'win32' in sys.platform:
-            import platform
-            if '64' in platform.architecture()[0]:
-                CMAKE_COMMAND += ['-Thost=x64', '-DCMAKE_GENERATOR_PLATFORM=x64', '-Dall=OFF',
-                        '-Dmathmore=OFF', '-Dbuiltin_ftgl=OFF', '-Droofit=OFF', '-Dgfal=OFF', '-Dfftw3=OFF']
-                FFTW_INC = os.environ.get("FFTW_INC", None)
-                FFTW_LIB = os.environ.get("FFTW_LIB", None)
-                if FFTW_INC and FFTW_LIB:
-                    CMAKE_COMMAND += ["-DFFTW_INCLUDE_DIR={}".format(FFTW_INC), "-DFFTW_LIBRARY={}".format(FFTW_LIB)]
+        if 'CMAKE_CLING_ARGS' in os.environ:
+            CMAKE_CLING_ARGS = shlex.split(os.environ['CMAKE_CLING_ARGS'])
         else:
-            CMAKE_COMMAND += ['-Dbuiltin_freetype=OFF']
-        CMAKE_COMMAND.append('-DCMAKE_INSTALL_PREFIX='+prefix)
+            CMAKE_CLING_ARGS = [
+                    stdcxx, '-DLLVM_ENABLE_TERMINFO=0',
+                    '-Dminimal=ON', '-Dasimage=OFF', '-Droot7=OFF', '-Dhttp=OFF',
+                    '-Dbuiltin_pcre=ON', '-Dbuiltin_zlib=ON', '-Dbuiltin_xxhash=ON']
+            if 'darwin' in sys.platform:
+                CMAKE_CLING_ARGS.append('-Dlibcxx=ON')
+            CMAKE_CLING_ARGS.append('-DCMAKE_BUILD_TYPE='+get_build_type())
+            if 'win32' in sys.platform:
+                CMAKE_CLING_ARGS += ['-Dbuiltin_freetype=ON']
+                import platform
+                if '64' in platform.architecture()[0]:
+                    CMAKE_CLING_ARGS += ['-Thost=x64', '-DCMAKE_GENERATOR_PLATFORM=x64', '-Dall=OFF',
+                            '-Dmathmore=OFF', '-Dbuiltin_ftgl=OFF', '-Droofit=OFF', '-Dgfal=OFF', '-Dfftw3=OFF']
+                    FFTW_INC = os.environ.get("FFTW_INC", None)
+                    FFTW_LIB = os.environ.get("FFTW_LIB", None)
+                    if FFTW_INC and FFTW_LIB:
+                        CMAKE_CLING_ARGS += ["-DFFTW_INCLUDE_DIR={}".format(FFTW_INC), "-DFFTW_LIBRARY={}".format(FFTW_LIB)]
+            else:
+                CMAKE_CLING_ARGS += ['-Dbuiltin_freetype=OFF']
+            CMAKE_CLING_ARGS.append('-DCMAKE_INSTALL_PREFIX='+prefix)
+        CMAKE_COMMAND = ['cmake', srcdir ] + CMAKE_CLING_ARGS
 
         log.info('Running cmake for cppyy-cling: %s', ' '.join(CMAKE_COMMAND))
         if subprocess.call(CMAKE_COMMAND, cwd=builddir) != 0:
@@ -238,10 +243,10 @@ class my_install(_install):
             raise DistutilsSetupError('Failed to install cppyy-cling')
         if env_make: os.putenv("MAKE", env_make)
 
-     # remove allDict.cxx.pch as it's not portable (rebuild on first run, see cppyy)
+        # remove allDict.cxx.pch as it's not portable (rebuild on first run, see cppyy)
         log.info('removing allDict.cxx.pch')
         os.remove(os.path.join(get_prefix(), 'etc', 'allDict.cxx.pch'))
-     # for manylinux, reset the default cxxversion to 17 if no user override
+        # for manylinux, reset the default cxxversion to 17 if no user override
         if not 'STDCXX' in os.environ and is_manylinux():
             log.info('updating root-config to C++17 for manylinux')
             inp = os.path.join(get_prefix(), 'bin', 'root-config')
-- 
2.23.0

